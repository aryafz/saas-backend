generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  SITE_OWNER
  OPERATOR
  USER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  sites     Site[]   @relation("OwnerSites")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Site {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  owner     User     @relation("OwnerSites", fields: [ownerId], references: [id])
  plans     SitePlan[]
  features  SiteFeature[]
  themes    SiteTheme[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Plan {
  id        String        @id @default(uuid())
  name      String
  price     Float
  features  PlanFeature[]
  sites     SitePlan[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Feature {
  id        String        @id @default(uuid())
  name      String        @unique
  description String?
  plans     PlanFeature[]
  sites     SiteFeature[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlanFeature {
  id        String   @id @default(uuid())
  planId    String
  featureId String
  plan      Plan     @relation(fields: [planId], references: [id])
  feature   Feature  @relation(fields: [featureId], references: [id])

  @@index([planId])
  @@index([featureId])
}

enum SitePlanStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model SitePlan {
  id         String          @id @default(uuid())
  siteId     String
  planId     String
  site       Site            @relation(fields: [siteId], references: [id])
  plan       Plan            @relation(fields: [planId], references: [id])
  startedAt  DateTime        @default(now())
  expiresAt  DateTime?
  status     SitePlanStatus  @default(ACTIVE)
  payments   Payment[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([siteId])
  @@index([planId])
}

model SiteFeature {
  id        String   @id @default(uuid())
  siteId    String
  featureId String
  site      Site     @relation(fields: [siteId], references: [id])
  feature   Feature  @relation(fields: [featureId], references: [id])
  activatedAt DateTime @default(now())
  expiresAt  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([siteId])
  @@index([featureId])
}

model Theme {
  id          String      @id @default(uuid())
  key         String      @unique
  name        String
  description String?
  assetsUrl   String
  sites       SiteTheme[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SiteTheme {
  id        String   @id @default(uuid())
  siteId    String
  themeId   String
  site      Site     @relation(fields: [siteId], references: [id])
  theme     Theme    @relation(fields: [themeId], references: [id])
  activatedAt DateTime @default(now())

  @@index([siteId])
  @@index([themeId])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Payment {
  id             String         @id @default(uuid())
  sitePlanId     String
  sitePlan       SitePlan       @relation(fields: [sitePlanId], references: [id])
  amount         Float
  currency       String
  status         PaymentStatus  @default(PENDING)
  transactionDate DateTime      @default(now())
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([sitePlanId])
}
